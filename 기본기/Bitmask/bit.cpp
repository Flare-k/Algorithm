#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    // << : 쉬프트, 왼쪽으로 n만큼 밀어주고 삐져나온 비트들을 제거하고 우측에 0을 추가해준다.
    // >> : 쉬프트, 오른쪽으로 n만큼 밀어주고 삐져나온 비트들을 제거하고 좌측에 0을 추가해준다.
    // 비트 & 비트: 둘다 1일땐 1이 되고 나머지의 경우인 0이 된다. (AND)
    // 비트 | 비트: 둘중 하나라도 1이면 1, 둘다 0이면 0 (OR)
    // 비트 ^ 비트: 두 비트가 다르면 1, 같으면 0

    /*
    AND의 경우..
      0 0 0 1 0 0 1 1 : x
    & 1 0 1 1 0 0 1 0 : y
    -------------------
      0 0 0 1 0 0 1 0

    y의 비트가 0인 부분은 x의 비트와 상관없이 결과값이 항상 0이다.
    반대로, y의 비트가 1인 경우엔 y와 비트가 무엇이든지간에 x의 비트가 그대로 결과값이 된다.
    따라서 y를 필터의 역할로 볼 수 있다. 
    */

    /* i번째 비트 구하기
    1. x & (1 << i)
    2. (x >> i) & 1
    */

   /* i번째 비트를 0 or 1로 설정하기
   1. x | (1 << i)
   2. x & ~(1 << i)
   */

    return 0;
}